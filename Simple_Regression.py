# -*- coding: utf-8 -*-
"""Athens House prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F3u-HnQjNCihQG8nDJU3uei0SVg8LBwr
"""





import argparse
import sys

import numpy as np
from matplotlib import pyplot as plt
import numpy.linalg as la


# Compute the sample mean and standard deviations for each feature (column)
# across the training examples (rows) from the data matrix X.
def mean_std(X):
    mean = np.mean(X, axis=0)
    std = np.std(X, axis=0)
    return mean, std


# Standardize the features of the examples in X by subtracting their mean and
# dividing by their standard deviation, as provided in the parameters.
def standardize(X, mean, std):
    S = (X - mean) / std
    return S

# Read data matrix X and labels t from text file.
def read_data(file_name):
    data = np.loadtxt(file_name)
    X = data[:, :-1]
    t = data[:, -1]
    return X, t


# Implement gradient descent algorithm to compute w = [w0, w1].
def train(X, t, eta, epochs):
    costs = []
    ep = []
    w = np.zeros(X.shape[1])
    for epoch in range(epochs):
        gradient = compute_gradient(X, t, w)
        w -= eta * gradient
        if epoch % 10 == 0:
            cost = compute_cost(X, t, w)
            costs.append(cost)
            ep.append(epoch)
    return w, ep, costs

# Compute RMSE on dataset (X, t).
def compute_rmse(X, t, w):
    predictions = np.dot(X, w)
    mse = np.mean((predictions - t) ** 2)
    rmse = np.sqrt(mse)
    return rmse

# Compute objective function (cost) on dataset (X, t).
def compute_cost(X, t, w):
    predictions = np.dot(X, w)
    error = predictions - t
    cost = (1 / (2 * len(t))) * np.dot(error.T, error)
    return cost

# Compute gradient of the objective function (cost) on dataset (X, t).
def compute_gradient(X, t, w):
    predictions = np.dot(X, w)
    error = predictions - t
    gradient = (1 / len(t)) * np.dot(X.T, error)
    return gradient

# BONUS: Implement stochastic gradient descent algorithm to compute w = [w0, w1].
def train_SGD(X, t, eta, epochs):
    costs = []
    ep = []
    w = np.zeros(X.shape[1])
    for epoch in range(epochs):
        # Randomly shuffle the data for each epoch
        indices = np.arange(len(t))
        np.random.shuffle(indices)
        X_shuffled = X[indices]
        t_shuffled = t[indices]

        for i in range(len(t)):
            gradient = compute_gradient(X_shuffled[i:i+1], t_shuffled[i:i+1], w)
            w -= eta * gradient

        if epoch % 10 == 0:
            cost = compute_cost(X, t, w)
            costs.append(cost)
            ep.append(epoch)
    return w, ep, costs

##======================= Main program =======================##
parser = argparse.ArgumentParser('Simple Regression Exercise.')
parser.add_argument('-i', '--input_data_dir',
                    type=str,
                    default='/content',
                    help='Directory for the simple houses dataset.')
FLAGS, unparsed = parser.parse_known_args()

# Read the training and test data.
Xtrain, ttrain = read_data(FLAGS.input_data_dir + "/train.txt")
Xtest, ttest = read_data(FLAGS.input_data_dir + "/test.txt")

# Compute mean and standard deviation for feature scaling using training data.
mean, std = mean_std(Xtrain)

# Standardize the training and test features using the mean and std computed over training.
Xtrain = np.hstack((np.ones((Xtrain.shape[0], 1)), standardize(Xtrain, mean, std)))
Xtest = np.hstack((np.ones((Xtest.shape[0], 1)), standardize(Xtest, mean, std)))

# Computing parameters for each training method for eta=0.1 and 200 epochs
eta = 0.1
epochs = 200

w, eph, costs = train(Xtrain, ttrain, eta, epochs)

# Print model parameters.
print('Params GD: ', w)

# Print cost and RMSE on training data.
print('Training RMSE: %0.2f.' % compute_rmse(Xtrain, ttrain, w))
print('Training cost: %0.2f.' % compute_cost(Xtrain, ttrain, w))

# Print cost and RMSE on test data.
print('Test RMSE: %0.2f.' % compute_rmse(Xtest, ttest, w))
print('Test cost: %0.2f.' % compute_cost(Xtest, ttest, w))

# Compute parameters using SGD
w_sgd, eph_sgd, costs_sgd = train_SGD(Xtrain, ttrain, eta, epochs)

# Print model parameters for SGD
print('Params SGD: ', w_sgd)

# Print cost and RMSE on training data for SGD
print('Training RMSE SGD: %0.2f.' % compute_rmse(Xtrain, ttrain, w_sgd))
print('Training cost SGD: %0.2f.' % compute_cost(Xtrain, ttrain, w_sgd))

# Print cost and RMSE on test data for SGD
print('Test RMSE SGD: %0.2f.' % compute_rmse(Xtest, ttest, w_sgd))
print('Test cost SGD: %0.2f.' % compute_cost(Xtest, ttest, w_sgd))


# Plotting epochs vs. cost for gradient descent methods
plt.xlabel('Epochs')
plt.ylabel('Cost')
plt.yscale('log')
plt.plot(eph, costs, 'bo-', label='Train J(w)')
plt.plot(eph_sgd, costs_sgd, 'ro-', label='SGD')  # Plot SGD
plt.legend()
plt.show()
plt.close()

# Plotting linear approximation for each training method
plt.xlabel('Floor sizes')
plt.ylabel('House prices')
plt.plot(Xtrain[:, 1], ttrain, 'bo', label='Training data')
plt.plot(Xtest[:, 1], ttest, 'g^', label='Test data')
plt.plot(Xtrain[:, 1], np.dot(Xtrain, w), 'b', label='GD')
plt.legend()
plt.show()
#plt.savefig('train-test-line.png')
plt.close()



